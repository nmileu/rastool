# -*- coding: utf-8 -*-
"""
/***************************************************************************
 rastool
                                 A QGIS plugin
 Tool for impact/risk assessment(ADA-Impact tools)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-05
        git sha              : $Format:%H$
        copyright            : (C) 2023 by IGOT-UL
        email                : nmileu@edu.ulisboa.pt
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtCore import  *
from qgis.PyQt.QtGui import QIcon, QColor, QFont
from qgis.PyQt.QtWidgets import QAction
from PyQt5.QtWidgets import QMessageBox
from qgis.PyQt.QtWidgets import QWidget, QVBoxLayout, QLabel, QLineEdit, QPushButton, QFileDialog, QDockWidget
from qgis.PyQt.QtGui import QPixmap
from qgis.utils import iface

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Rastool_dialog import rastoolDialog
import os.path

from qgis.core import *

import processing

class rastool:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'rastool_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Rastool')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
               

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('rastool', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Rastool/icon.png'
        
        self.add_action(
            icon_path,
            text=self.tr(u'Iimpact/risk assessment'),
            callback=self.run,
            parent=self.iface.mainWindow())
        
        # will be set False in run()
        self.first_start = True
        self.png_Pisa = self.plugin_dir + os.sep + "rastool_logo.png"
        self.icona_Unipi = QPixmap(self.png_Pisa)
        self.icona_Unipi = self.icona_Unipi.scaled(100, 12, QtCore.Qt.KeepAspectRatio)
        self.png_Impact = self.plugin_dir + os.sep + "rastool.png"
        self.icona_Impact = QPixmap(self.png_Impact)
        self.icona_Impact = self.icona_Impact.scaled(41, 41, QtCore.Qt.KeepAspectRatio)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Rastool'),
                action)
            self.iface.removeToolBarIcon(action)

    def adaidupdate(self,adaLayer):
        #Update adaLAyer ID field
        field_name = "ID"
        layer = adaLayer # Gives you the ADA layer
        field_index = layer.fields().indexFromName(field_name)
        if field_index == -1:
            print("The field {} does not exist in layer {}!".format(field_name, layer.name()))
            layer.startEditing()
            if layer.dataProvider().fieldNameIndex("ID") == -1:
                layer.dataProvider().addAttributes([QgsField("ID", QVariant.Int)])
                layer.updateFields()
            id_new_col= layer.dataProvider().fieldNameIndex("ID")
            for feature in layer.getFeatures():
                layer.changeAttributeValue(feature.id(), id_new_col, "val")
            layer.commitChanges()
            i = 0
            with edit(layer):  
                for feature in layer.getFeatures():
                    layer.changeAttributeValue(feature.id(), feature.fieldNameIndex('ID'), feature.id())
                    i += 1
        else: 
            print("The field {} exists in layer {}!".format(field_name, layer.name()))
            # Get a layer object and enter edit mode:
            i = 0
            with edit(layer):  
                for feature in layer.getFeatures():
                    layer.changeAttributeValue(feature.id(), feature.fieldNameIndex('ID'), feature.id())
                    i += 1

    def joinadaroads(self,adaLayer,sumlinelengths1):
        #Join ADA layer to ROADSSUMCOUNT layer using ID field
        # Get input (sumcount) and target (ADA layer) layers
        target=adaLayer
        input=sumlinelengths1
        # Set properties for the join
        targetField='ID'
        inputField='ID'
        joinObject = QgsVectorLayerJoinInfo()
        joinObject.setJoinFieldName('ID')
        joinObject.setTargetFieldName('ID')
        joinObject.setJoinLayerId = input.id()
        joinObject.setUsingMemoryCache(True)
        joinObject.setJoinLayer(input)
        target.addJoin(joinObject)

    def joinadarailway(self,adaLayer,sumlinelengths2):
        #Join ADA layer to ROADSSUMCOUNT layer using ID field
        # Get input (sumcount) and target (ADA layer) layers
        target=adaLayer
        input=sumlinelengths2
        # Set properties for the join
        targetField='ID'
        inputField='ID'
        joinObject = QgsVectorLayerJoinInfo()
        joinObject.setJoinFieldName('ID')
        joinObject.setTargetFieldName('ID')
        joinObject.setJoinLayerId = input.id()
        joinObject.setUsingMemoryCache(True)
        joinObject.setJoinLayer(input)
        target.addJoin(joinObject)

    def joinadacritical(self,adaLayer,exposedelements):
        #Join ADA layer to EXPOSED_CRITICAL_ELEMENTS layer using ADA_ID field
        # Get input (area) and target (ADA layer) layers
        target=adaLayer
        input=exposedelements
        # Set properties for the join
        targetField='ADA_ID'
        inputField='ADA_ID'
        joinObject = QgsVectorLayerJoinInfo()
        joinObject.setJoinFieldName('ADA_ID')
        joinObject.setTargetFieldName('ADA_ID')
        joinObject.setJoinLayerId = input.id()
        joinObject.setUsingMemoryCache(True)
        joinObject.setJoinLayer(input)
        target.addJoin(joinObject)

#1 PROCESS MAGNITUDE (ADA Size_Velocity_Temporal trend)
#1 Temporal trend linear (negative; positive)           
    #def calculaMagnitude1(self):

#2 PROCESS MAGNITUDE (ADA Size_Velocity_Temporal trend)
#2 Temporal trend with incresing velocity           
    #def calculaMagnitude2(self):

#3 PROCESS MAGNITUDE (ADA Size_Velocity_Temporal trend)
#3 Process: subsidence ; setlement
#3 Temporal trend negative exponential          
    #def calculaMagnitude3(self):
	
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = rastoolDialog()
            self.dlg.RASlogo.setPixmap(self.icona_Unipi)
            self.dlg.Impactlogo.setPixmap(self.icona_Impact)
            
        self.dlg.layerComboBox.clear()
        layers = QgsProject.instance().mapLayers().values()
        # fill selection combo, only polygon layers
        n = 0
        for layer in layers:
            if layer.type() == QgsMapLayer.VectorLayer and \
                layer.geometryType() == QgsWkbTypes.PolygonGeometry:
                self.dlg.layerComboBox.addItem( layer.name(), layer )
                n += 1

        if n == 0:  # no polygon layer
            self.iface.messageBar().pushMessage(self.tr("Warning"),
                self.tr("No polygon layer in actual project"),
                level=Qgis.Warning)
            return
        
        self.dlg.populationcomboBox.clear()
        self.dlg.buildingscomboBox.clear()        
        # fill selection combo, only raster layers
        n = 0
        for layer in layers:
            if layer.type() == QgsMapLayer.RasterLayer:
                self.dlg.populationcomboBox.addItem( layer.name(), layer )
                self.dlg.buildingscomboBox.addItem( layer.name(), layer )
                n += 1

        if n == 0:  # no raster layer
            self.iface.messageBar().pushMessage(self.tr("Warning"),
                self.tr("No raster layer in actual project"),
                level=Qgis.Warning)
            return
        # fill selection combo, only line layers
        n = 0
        
        self.dlg.roadscomboBox.clear()
        self.dlg.railwaycomboBox.clear()          
        for layer in layers:
            if layer.type() == QgsMapLayer.VectorLayer and \
                layer.geometryType() == QgsWkbTypes.LineGeometry:
                self.dlg.roadscomboBox.addItem( layer.name(), layer )
                self.dlg.railwaycomboBox.addItem( layer.name(), layer )
                n += 1

        if n == 0:  # no line layer
            self.iface.messageBar().pushMessage(self.tr("Warning"),
                self.tr("No line layer in actual project"),
                level=Qgis.Warning)
            return            
        # fill selection combo, only polygon layers
        n = 0        
        self.dlg.criticalcomboBox.clear() 
        for layer in layers:
            if layer.type() == QgsMapLayer.VectorLayer and \
                layer.geometryType() == QgsWkbTypes.PolygonGeometry:
                self.dlg.criticalcomboBox.addItem( layer.name(), layer )
                n += 1

        if n == 0:  # no polygon layer
            self.iface.messageBar().pushMessage(self.tr("Warning"),
                self.tr("No polygon layer in actual project"),
                level=Qgis.Warning)
            return 
       
        self.dlg.output.setStorageMode(self.dlg.output.SaveFile)
        self.dlg.output.setConfirmOverwrite(True)
        self.dlg.output.setFilter(self.tr("ESRI Shapefile (*.shp *.SHP)"))
        
        # show the dialog
        self.dlg.show()

        # Run the dialog event loop
        result = self.dlg.exec_()
       
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            
            index = self.dlg.layerComboBox.currentIndex()
            adaLayer = self.dlg.layerComboBox.itemData(index)
            print (adaLayer.source())
            index2 = self.dlg.populationcomboBox.currentIndex()
            populationLayer = self.dlg.populationcomboBox.itemData(index2)
            print (populationLayer.source())
            index3 = self.dlg.buildingscomboBox.currentIndex()
            buildingsLayer = self.dlg.buildingscomboBox.itemData(index3)
            print (buildingsLayer.source())
            index4 = self.dlg.roadscomboBox.currentIndex()
            roadsLayer = self.dlg.roadscomboBox.itemData(index4)
            print (roadsLayer.source())
            index5 = self.dlg.railwaycomboBox.currentIndex()
            railwayLayer = self.dlg.railwaycomboBox.itemData(index5)
            print (railwayLayer.source())
            index6 = self.dlg.criticalcomboBox.currentIndex()
            criticalLayer = self.dlg.criticalcomboBox.itemData(index6)
            print (criticalLayer.source())
            
            # Calculate population for each ADA.
            self.adaidupdate(adaLayer)# update id field
            params1 = {'INPUT_RASTER': populationLayer.dataProvider().dataSourceUri(),
                'RASTER_BAND': 1, 'INPUT_VECTOR': adaLayer.source(),
                'COLUMN_PREFIX': 'P_', 'STATS': [1]
                }
            result1 = processing.run("qgis:zonalstatistics", params1)
            #self.dlg.progressBar.setValue(12)
            # Calculate buidings for each ADA.
            #print (buildingsLayer.dataProvider().dataSourceUri())
            params2 = {'INPUT_RASTER': buildingsLayer.dataProvider().dataSourceUri(),
                'RASTER_BAND': 1, 'INPUT_VECTOR': adaLayer.source(),
                'COLUMN_PREFIX': 'B_', 'STATS': [1]
                }
            #self.dlg.progressBar.setValue(25)
            result2 = processing.run("qgis:zonalstatistics", params2)            

            params3 = {'LINES':roadsLayer.source(),
                'POLYGONS':adaLayer.source(),
                'LEN_FIELD':'LENROAD','COUNT_FIELD':'COUNTROAD','OUTPUT':'memory:{}'.format('roadssumcount')
                }           
            result3 = processing.run("qgis:sumlinelengths", params3)
            #self.dlg.progressBar.setValue(37)
            sumlinelengths1 = result3['OUTPUT']
            QgsProject.instance().addMapLayer(sumlinelengths1)
            self.joinadaroads(adaLayer,sumlinelengths1)#PErforms join adaLayer.ID with roadssumcount.ID
            params4 = {'LINES':railwayLayer.source(),
                'POLYGONS':adaLayer.source(),
                'LEN_FIELD':'LENRAIL','COUNT_FIELD':'COUNTRAIL','OUTPUT':'memory:{}'.format('railsumcount')
                }           
            result4 = processing.run("qgis:sumlinelengths", params4)
            #self.dlg.progressBar.setValue(50)
            sumlinelengths2 = result4['OUTPUT']
            QgsProject.instance().addMapLayer(sumlinelengths2)
            self.joinadarailway(adaLayer,sumlinelengths2)#Performs join adaLayer.ID with railsumcount.ID
            # INSERIR AQUI A INTERSEÇÃO COM OS ELEMENTOS EXPOSTOS CRÍTICOS
            ##############################################################
            params5 = {'INPUT':adaLayer.source(),
                'OVERLAY':criticalLayer.source(),
                'INPUT_FIELDS':['ADA_ID','AREA','TS_CLASS'],'OVERLAY_FIELDS':[],'OUTPUT':'memory:{}'.format('adacriticalintersection')
                }           
            result5 = processing.run("qgis:intersection", params5)
            #self.dlg.progressBar.setValue(50)
            exposedelements = result5['OUTPUT']
            QgsProject.instance().addMapLayer(exposedelements)
            self.joinadacritical(adaLayer,exposedelements)#Performs join adaLayer.ADA_ID with railsumcount.ADA_ID            
                        
            #Check for existing EXPOSITION field | add or delete EXPOSITION field
            field_name = "EXPOSITION"
            layer = adaLayer # Gives you the ADA layer
            field_index = layer.fields().indexFromName(field_name)
            if field_index == -1:
                print("The field {} does not exist in layer {}!".format(field_name, layer.name()))
                layer.startEditing()
                if layer.dataProvider().fieldNameIndex("EXPOSITION") == -1:
                    layer.dataProvider().addAttributes([QgsField("EXPOSITION", QVariant.Int)])
                    layer.updateFields()
                id_new_col= layer.dataProvider().fieldNameIndex("EXPOSITION")
                for feature in layer.getFeatures():
                    layer.changeAttributeValue(feature.id(), id_new_col, "val")
                layer.commitChanges()
            else: 
                print("The field {} exists in layer {}!".format(field_name, layer.name()))

                # Update the fields, so the changes are recognized:
                layer.updateFields()

            #Calculate exposition, process magnitude and impact
            layer = adaLayer
            count = layer.featureCount()
            with edit(layer): # open edti sessio for the layer
                for feature in layer.getFeatures():
                    #Check none values from critical exposed elements intersection and converts them to zero or one
                    critical_n = 0
                    if feature['adacriticalintersection_TS_CLASS'] is None:
                        critical_n = 0
                    else:
                        critical_n = 1
                        print("adacriticalintersection_TS_CLASS: 1")
                    # condition 1 POP 0-10 x BUILDINGS
                    if (feature['P_sum'] >= 0 and feature['P_sum'] < 10) and (feature['B_sum'] >= 0 and feature['B_sum'] < 100):
                        feature['EXPOSITION'] = 1
                    elif (feature['P_sum'] >= 0 and feature['P_sum'] < 10) and (feature['B_sum'] >= 100 and feature['B_sum'] < 1000):
                        feature['EXPOSITION'] = 1
                    elif (feature['P_sum'] >= 0 and feature['P_sum'] < 10) and (feature['B_sum'] >= 1000):
                        feature['EXPOSITION'] = 2
                    # condition 2 POP 10-100 x BUILDINGS
                    elif (feature['P_sum'] >= 10 and feature['P_sum'] < 100) and (feature['B_sum'] >= 0 and feature['B_sum'] < 100):
                        feature['EXPOSITION'] = 2
                    elif (feature['P_sum'] >= 10 and feature['P_sum'] < 100) and (feature['B_sum'] >= 100 and feature['B_sum'] < 1000):
                        feature['EXPOSITION'] = 2
                    elif (feature['P_sum'] >= 10 and feature['P_sum'] < 100) and (feature['B_sum'] >= 1000):
                        feature['EXPOSITION'] = 3
                    # condition 3 POP >1000 x BUILDINGS
                    elif (feature['P_sum'] >= 100) and (feature['B_sum'] >= 0 and feature['B_sum'] < 100):
                        feature['EXPOSITION'] = 3
                    elif (feature['P_sum'] >= 100) and (feature['B_sum'] >= 100 and feature['B_sum'] < 1000):
                        feature['EXPOSITION'] = 3
                    elif (feature['P_sum'] >= 100) and (feature['B_sum'] >= 1000):
                        feature['EXPOSITION'] = 3
                    #conditions with critical roads and/or railway within ADA
                    # condition 1 POP 0-10 x BUILDINGS                    
                    elif (feature['roadssumcount_COUNTROAD'] + feature['railsumcount_COUNTRAIL'] + critical_n > 0) and (feature['P_sum'] >= 0 and feature['P_sum'] < 10) and (feature['B_sum'] >= 0 and feature['B_sum'] < 100):
                        feature['EXPOSITION'] = 2
                    elif (feature['roadssumcount_COUNTROAD'] + feature['railsumcount_COUNTRAIL'] + critical_n > 0) and (feature['P_sum'] >= 0 and feature['P_sum'] < 10) and (feature['B_sum'] >= 100 and feature['B_sum'] < 1000):
                        feature['EXPOSITION'] = 2
                    elif (feature['roadssumcount_COUNTROAD'] + feature['railsumcount_COUNTRAIL'] + critical_n > 0) and (feature['P_sum'] >= 0 and feature['P_sum'] < 10) and (feature['B_sum'] >= 1000):
                        feature['EXPOSITION'] = 3
                    # condition 2 POP 10-100 x BUILDINGS
                    elif (feature['roadssumcount_COUNTROAD'] + feature['railsumcount_COUNTRAIL'] + critical_n > 0) and (feature['P_sum'] >= 10 and feature['P_sum'] < 100) and (feature['B_sum'] >= 0 and feature['B_sum'] < 100):
                        feature['EXPOSITION'] = 3
                    elif (feature['roadssumcount_COUNTROAD'] + feature['railsumcount_COUNTRAIL'] + critical_n > 0) and (feature['P_sum'] >= 10 and feature['P_sum'] < 100) and (feature['B_sum'] >= 100 and feature['B_sum'] < 1000):
                        feature['EXPOSITION'] = 3
                    elif (feature['roadssumcount_COUNTROAD'] + feature['railsumcount_COUNTRAIL'] + critical_n > 0) and (feature['P_sum'] >= 10 and feature['P_sum'] < 100) and (feature['B_sum'] >= 1000):
                        feature['EXPOSITION'] = 3
                    # condition 3 POP >1000 x BUILDINGS
                    elif (feature['roadssumcount_COUNTROAD'] + feature['railsumcount_COUNTRAIL'] + critical_n > 0) and (feature['P_sum'] >= 100) and (feature['B_sum'] >= 0 and feature['B_sum'] < 100):
                        feature['EXPOSITION'] = 3
                    elif (feature['roadssumcount_COUNTROAD'] + feature['railsumcount_COUNTRAIL'] + critical_n > 0) and (feature['P_sum'] >= 100) and (feature['B_sum'] >= 100 and feature['B_sum'] < 1000):
                        feature['EXPOSITION'] = 3
                    elif (feature['roadssumcount_COUNTROAD'] + feature['railsumcount_COUNTRAIL'] + critical_n > 0) and (feature['P_sum'] >= 100) and (feature['B_sum'] >= 1000):
                        feature['EXPOSITION'] = 3       
                    # update feature values
                    layer.updateFeature(feature)
                    iface.messageBar().pushMessage("Info", "Exposition calculation number of features: {}".format(int(count)), duration=3000)
            #self.dlg.progressBar.setValue(62)
            #Check for existing MAGNITUDE field | add or delete MAGNITUDE field
            field_name = "MAGNITUDE"
            layer = adaLayer # Gives you the ADA layer
            field_index = layer.fields().indexFromName(field_name)
            if field_index == -1:
                print("The field {} does not exist in layer {}!".format(field_name, layer.name()))
                layer.startEditing()
                if layer.dataProvider().fieldNameIndex("MAGNITUDE") == -1:
                    layer.dataProvider().addAttributes([QgsField("MAGNITUDE", QVariant.Int)])
                    layer.updateFields()
                id_new_col= layer.dataProvider().fieldNameIndex("MAGNITUDE")
                for feature in layer.getFeatures():
                    layer.changeAttributeValue(feature.id(), id_new_col, "val")
                layer.commitChanges()
            else: 
                print("The field {} exists in layer {}!".format(field_name, layer.name()))

                # Update the fields, so the changes are recognized:
                layer.updateFields()
            
            # Calculate process magnitude
            count = layer.featureCount()
            with edit(layer): # open edti sessio for the layer
                for feature in layer.getFeatures():
                    processos = str(feature['PROCESSES'])
                    #x = processos.find('LAN')
                    #print("Processos:", x) 
                    if feature['TS_CLASS'] == 3:
                    #matriz 2
                    # condition 1 SIZE 0-10000 x VELOCITY
                        if (feature['AREA'] >= 0 and feature['AREA'] < 10000) and (feature['V_MEAN_ABS'] >= 0 and feature['V_MEAN_ABS'] < 16):
                            feature['MAGNITUDE'] = 2
                        elif (feature['AREA'] >= 0 and feature['AREA'] < 10000) and (feature['V_MEAN_ABS'] >= 16 and feature['V_MEAN_ABS'] < 32):
                            feature['MAGNITUDE'] = 3
                        elif (feature['AREA'] >= 0 and feature['AREA'] < 10000) and (feature['V_MEAN_ABS'] >= 32):
                            feature['MAGNITUDE'] = 3
                        # condition 2 SIZE 10000-100000 x VELOCITY
                        elif (feature['AREA'] >= 10000 and feature['AREA'] < 100000) and (feature['V_MEAN_ABS'] >= 0 and feature['V_MEAN_ABS'] < 16):
                            feature['MAGNITUDE'] = 2
                        elif (feature['AREA'] >= 10000 and feature['AREA'] < 100000) and (feature['V_MEAN_ABS'] >= 16 and feature['V_MEAN_ABS'] < 32):
                            feature['MAGNITUDE'] = 3
                        elif (feature['AREA'] >= 10000 and feature['AREA'] < 100000) and (feature['V_MEAN_ABS'] >= 32):
                            feature['MAGNITUDE'] = 3
                        # condition 3 SIZE >100000 x VELOCITY
                        elif (feature['AREA'] >= 100000) and (feature['V_MEAN_ABS'] >= 0 and feature['V_MEAN_ABS'] < 16):
                            feature['MAGNITUDE'] = 3
                        elif (feature['AREA'] >= 100000) and (feature['V_MEAN_ABS'] >= 16 and feature['V_MEAN_ABS'] < 32):
                            feature['MAGNITUDE'] = 3
                        elif (feature['AREA'] >= 100000) and (feature['V_MEAN_ABS'] >= 32):
                            feature['MAGNITUDE'] = 3
                    elif feature['TS_CLASS'] == 2:
                    # aplica-se a matriz 1
                    # condition 1 SIZE 0-10000 x VELOCITY
                        if (feature['AREA'] >= 0 and feature['AREA'] < 10000) and (feature['V_MEAN_ABS'] >= 0 and feature['V_MEAN_ABS'] < 16):
                            feature['MAGNITUDE'] = 1
                        elif (feature['AREA'] >= 0 and feature['AREA'] < 10000) and (feature['V_MEAN_ABS'] >= 16 and feature['V_MEAN_ABS'] < 32):
                            feature['MAGNITUDE'] = 2
                        elif (feature['AREA'] >= 0 and feature['AREA'] < 10000) and (feature['V_MEAN_ABS'] >= 32):
                            feature['MAGNITUDE'] = 2
                        # condition 2 SIZE 10000-100000 x VELOCITY
                        elif (feature['AREA'] >= 10000 and feature['AREA'] < 100000) and (feature['V_MEAN_ABS'] >= 0 and feature['V_MEAN_ABS'] < 16):
                            feature['MAGNITUDE'] = 1
                        elif (feature['AREA'] >= 10000 and feature['AREA'] < 100000) and (feature['V_MEAN_ABS'] >= 16 and feature['V_MEAN_ABS'] < 32):
                            feature['MAGNITUDE'] = 2
                        elif (feature['AREA'] >= 10000 and feature['AREA'] < 100000) and (feature['V_MEAN_ABS'] >= 32):
                            feature['MAGNITUDE'] = 3
                        # condition 3 SIZE >100000 x VELOCITY
                        elif (feature['AREA'] >= 100000) and (feature['V_MEAN_ABS'] >= 0 and feature['V_MEAN_ABS'] < 16):
                            feature['MAGNITUDE'] = 2
                        elif (feature['AREA'] >= 100000) and (feature['V_MEAN_ABS'] >= 16 and feature['V_MEAN_ABS'] < 32):
                            feature['MAGNITUDE'] = 3
                        elif (feature['AREA'] >= 100000) and (feature['V_MEAN_ABS'] >= 32):
                            feature['MAGNITUDE'] = 3
                    elif (feature['TS_CLASS'] == 1 and (processos.find('LAN') != -1 or processos.find('SIN')!= -1)):
                    #aplica-se a matriz 1
                    #else:
                    # condition 1 SIZE 0-10000 x VELOCITY
                        if (feature['AREA'] >= 0 and feature['AREA'] < 10000) and (feature['V_MEAN_ABS'] >= 0 and feature['V_MEAN_ABS'] < 16):
                            feature['MAGNITUDE'] = 1
                        elif (feature['AREA'] >= 0 and feature['AREA'] < 10000) and (feature['V_MEAN_ABS'] >= 16 and feature['V_MEAN_ABS'] < 32):
                            feature['MAGNITUDE'] = 2
                        elif (feature['AREA'] >= 0 and feature['AREA'] < 10000) and (feature['V_MEAN_ABS'] >= 32):
                            feature['MAGNITUDE'] = 2
                        # condition 2 SIZE 10000-100000 x VELOCITY
                        elif (feature['AREA'] >= 10000 and feature['AREA'] < 100000) and (feature['V_MEAN_ABS'] >= 0 and feature['V_MEAN_ABS'] < 16):
                            feature['MAGNITUDE'] = 1
                        elif (feature['AREA'] >= 10000 and feature['AREA'] < 100000) and (feature['V_MEAN_ABS'] >= 16 and feature['V_MEAN_ABS'] < 32):
                            feature['MAGNITUDE'] = 2
                        elif (feature['AREA'] >= 10000 and feature['AREA'] < 100000) and (feature['V_MEAN_ABS'] >= 32):
                            feature['MAGNITUDE'] = 3
                        # condition 3 SIZE >100000 x VELOCITY
                        elif (feature['AREA'] >= 100000) and (feature['V_MEAN_ABS'] >= 0 and feature['V_MEAN_ABS'] < 16):
                            feature['MAGNITUDE'] = 2
                        elif (feature['AREA'] >= 100000) and (feature['V_MEAN_ABS'] >= 16 and feature['V_MEAN_ABS'] < 32):
                            feature['MAGNITUDE'] = 3
                        elif (feature['AREA'] >= 100000) and (feature['V_MEAN_ABS'] >= 32):
                            feature['MAGNITUDE'] = 3
                    elif (feature['TS_CLASS'] == 1 and (processos.find('LAN') == -1 or processos.find('SIN')== -1)):
                    #aplica-se a matriz 3
                    #else:
                    # condition 1 SIZE 0-10000 x VELOCITY
                        if (feature['AREA'] >= 0 and feature['AREA'] < 10000) and (feature['V_MEAN_ABS'] >= 0 and feature['V_MEAN_ABS'] < 16):
                            feature['MAGNITUDE'] = 1
                        elif (feature['AREA'] >= 0 and feature['AREA'] < 10000) and (feature['V_MEAN_ABS'] >= 16 and feature['V_MEAN_ABS'] < 32):
                            feature['MAGNITUDE'] = 1
                        elif (feature['AREA'] >= 0 and feature['AREA'] < 10000) and (feature['V_MEAN_ABS'] >= 32):
                            feature['MAGNITUDE'] = 2
                        # condition 2 SIZE 10000-100000 x VELOCITY
                        elif (feature['AREA'] >= 10000 and feature['AREA'] < 100000) and (feature['V_MEAN_ABS'] >= 0 and feature['V_MEAN_ABS'] < 16):
                            feature['MAGNITUDE'] = 1
                        elif (feature['AREA'] >= 10000 and feature['AREA'] < 100000) and (feature['V_MEAN_ABS'] >= 16 and feature['V_MEAN_ABS'] < 32):
                            feature['MAGNITUDE'] = 1
                        elif (feature['AREA'] >= 10000 and feature['AREA'] < 100000) and (feature['V_MEAN_ABS'] >= 32):
                            feature['MAGNITUDE'] = 2
                        # condition 3 SIZE >100000 x VELOCITY
                        elif (feature['AREA'] >= 100000) and (feature['V_MEAN_ABS'] >= 0 and feature['V_MEAN_ABS'] < 16):
                            feature['MAGNITUDE'] = 1
                        elif (feature['AREA'] >= 100000) and (feature['V_MEAN_ABS'] >= 16 and feature['V_MEAN_ABS'] < 32):
                            feature['MAGNITUDE'] = 2
                        elif (feature['AREA'] >= 100000) and (feature['V_MEAN_ABS'] >= 32):
                            feature['MAGNITUDE'] = 2                    
                    # update feature values
                    layer.updateFeature(feature)
                    iface.messageBar().pushMessage("Info", "Magnitude calculation number of features: {}".format(int(count)), duration=3000)
            #self.dlg.progressBar.setValue(75)
            #Check for existing IMPACT field | add or delete IMPACT field
            field_name = "IMPACT"
            layer = adaLayer # Gives you the ADA layer
            field_index = layer.fields().indexFromName(field_name)
            if field_index == -1:
                print("The field {} does not exist in layer {}!".format(field_name, layer.name()))
                layer.startEditing()
                if layer.dataProvider().fieldNameIndex("IMPACT") == -1:
                    layer.dataProvider().addAttributes([QgsField("IMPACT", QVariant.Int)])
                    layer.updateFields()
                id_new_col= layer.dataProvider().fieldNameIndex("IMPACT")
                for feature in layer.getFeatures():
                    layer.changeAttributeValue(feature.id(), id_new_col, "val")
                layer.commitChanges()
            else: 
                print("The field {} exists in layer {}!".format(field_name, layer.name()))
                # Update the fields, so the changes are recognized:
                layer.updateFields()

            # Calculate the potential impact
            count = layer.featureCount()
            with edit(layer): # open edti sessio for the layer
                for i, feature in enumerate(layer.getFeatures()):
                    print("Feature ID:", i)
                    percent = i / float(count) * 100
                    #iface.messageBar().pushMessage("Impact features processed {} %".format(int(percent)))
                    #self.dlg.progressBar.setValue(percent)
                    # potential impact assessment
                    if (feature['EXPOSITION'] == 1 and feature['MAGNITUDE'] == 1):
                        feature['IMPACT'] = 1
                    elif (feature['EXPOSITION'] == 1 and feature['MAGNITUDE'] == 2):
                        feature['IMPACT'] = 1
                    elif (feature['EXPOSITION'] == 1 and feature['MAGNITUDE'] == 3):
                        feature['IMPACT'] = 2
                    elif (feature['EXPOSITION'] == 2 and feature['MAGNITUDE'] == 1):
                        feature['IMPACT'] = 1
                    elif (feature['EXPOSITION'] == 2 and feature['MAGNITUDE'] == 2):
                        feature['IMPACT'] = 2
                    elif (feature['EXPOSITION'] == 2 and feature['MAGNITUDE'] == 3):
                        feature['IMPACT'] = 3
                    elif (feature['EXPOSITION'] == 3 and feature['MAGNITUDE'] == 1):
                        feature['IMPACT'] = 2
                    elif (feature['EXPOSITION'] == 3 and feature['MAGNITUDE'] == 2):
                        feature['IMPACT'] = 3
                    elif (feature['EXPOSITION'] == 3 and feature['MAGNITUDE'] == 3):
                        feature['IMPACT'] = 3
                    # update feature values
                    layer.updateFeature(feature)
                    iface.messageBar().pushMessage("Info", "Impact calculation number of features: {}".format(int(count)), duration=3000)
            #self.dlg.progressBar.setValue(90)        
        
        self.gravar(adaLayer)#Save Impact output layer        
        
        #adaLayer.loadNamedStyle(QgsApplication.qgisSettingsDirPath()+'python/plugins/rastool/impact.qml')
        #adaLayer.triggerRepaint()
        #self.dlg.progressBar.setValue(100) 
        #pass

    def gravar(self,adaLayer):
        #print(self.dlg.output.filePath())
        if self.dlg.output.filePath() != '':

            import os
            if os.path.exists(self.dlg.output.filePath()):

                #shape = self.dlg.layerComboBox.currentLayer()
                shape = adaLayer
                print (shape)
                ruta = self.dlg.output.filePath()
                options = QgsVectorFileWriter.SaveVectorOptions()
                options.actionOnExistingFile = QgsVectorFileWriter.CreateOrOverwriteFile
                options.actionOnExistingFile = QgsVectorFileWriter.CreateOrOverwriteLayer
                options.actionOnExistingFile = QgsVectorFileWriter.AppendToLayerNoNewFields  
                #options.shape = "_".join(shape.name().split(' '))
                writer = QgsVectorFileWriter.writeAsVectorFormat(shape,ruta,options)
                layer = QgsVectorLayer(ruta, os.path.basename(ruta), "ogr")
                provider = layer.dataProvider()
                print (provider)
                field_ids = []
                # Fieldnames to keep
                fieldnames = set(['ADA_ID','EXPOSITION','MAGNITUDE','IMPACT'])
                for field in layer.fields():
                    print (field.name())
                    if field.name() not in fieldnames:
                      field_ids.append(layer.fields().indexFromName(field.name()))

                # Delete the fields in the attribute table through their corresponding index 
                # in the list.
                layer.dataProvider().deleteAttributes(field_ids)
                layer.updateFields()
                
                # Add impact output layer to project
                QgsProject.instance().addMapLayer(layer)
                layer.loadNamedStyle(QgsApplication.qgisSettingsDirPath()+'python/plugins/rastool/impact.qml')
                layer.triggerRepaint()           
            else:
                shape = adaLayer
                print (shape)
                print ('Escreveu via else')
                id_col_EXPOSITION = shape.dataProvider().fieldNameIndex("EXPOSITION")
                id_col_MAGNITUDE = shape.dataProvider().fieldNameIndex("MAGNITUDE")
                id_col_IMPACT = shape.dataProvider().fieldNameIndex("IMPACT")
                ruta = self.dlg.output.filePath()                               
                writer = QgsVectorFileWriter.writeAsVectorFormat(shape,ruta,"UTF-8",shape.crs(),driverName="ESRI Shapefile", attributes = [0, id_col_EXPOSITION, id_col_MAGNITUDE, id_col_IMPACT])
                print (writer)
                layer = QgsVectorLayer(ruta, os.path.basename(ruta), "ogr")
                print (layer)
                provider = layer.dataProvider()
                print (provider)
                field_ids = []
                # Fieldnames to keep
                fieldnames = set(['ADA_ID','EXPOSITION','MAGNITUDE','IMPACT'])
                for field in layer.fields():
                    #print (field.name())
                    if field.name() not in fieldnames:
                      field_ids.append(layer.fields().indexFromName(field.name()))
 
                # Delete the fields in the attribute table through their corresponding index 
                # in the list.
                layer.dataProvider().deleteAttributes(field_ids)
                layer.updateFields()
                
                # Add impact output layer to project
                QgsProject.instance().addMapLayer(layer)
                layer.loadNamedStyle(QgsApplication.qgisSettingsDirPath()+'python/plugins/rastool/impact.qml')
                layer.triggerRepaint()
                
                # Show Feature Count
                root = QgsProject.instance().layerTreeRoot()
                myLayerNode = root.findLayer(layer)
                myLayerNode.setCustomProperty("showFeatureCount", True)
            
            
